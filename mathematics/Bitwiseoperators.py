# Python program to check if given number is power of 2 or not

# Function to check if x is power of 2
def isPowerOfTwo(n):
	if (n == 0):
		return False
	while (n != 1):
			if (n % 2 != 0):
				return False
			n = n // 2
			
	return True

# Driver code
# print(isPowerOfTwo(9))
############################################
# Given a number N, find the most significant set bit in the given number.
"""Input : N = 10
Output : 8
Binary representation of 10 is 1010
The most significant bit corresponds
to decimal number 8.

Input : N = 18
Output : 16"""
def setBitNumber(n):
    # if (n == 0):
    #     return 0
 
    # msb = 0
    # n = int(n / 2)
 
    # while (n > 0):
    #     n = int(n / 2)
    #     msb += 1
 
    # return (1 << msb)
    
    # 2nd method
    n |= n>>1
    n |= n>>2
    n |= n>>4
    n |= n>>8
    n |= n>>16
    
    n += 1
    return (n>>1) 

# print(setBitNumber(18))

############################################
# find XOR of numbers from 1 to n.
 
def computeXOR(n) :

    # if n is multiple of 4
    if n % 4 == 0 :
        return n
 
    # If n % 4 gives remainder 1
    if n % 4 == 1 :
        return 1
 
    # If n%4 gives remainder 2
    if n % 4 == 2 :
        return n + 1
 
    # If n%4 gives remainder 3
    return 0
# print(computeXOR(5))

###########################################
#Given an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair of the element from the array.

def Maxand(arr,n):
    mx = 0
    for i in range(0,n):
        for j in range(i+1,n):
            mx = max(mx, arr[i]&arr[j])
    return mx

a = [4, 8, 16, 2]
# print(Maxand(a,len(a)))
##########################################3
# Python3 code to check if k-th bit
# of a given number is set or not

def isKthBitSet(n, k):
	if n & (1 << (k - 1)):
		print( "yes")
	else:
		print("No")

# Driver code

# isKthBitSet(4, 0)

###################################
#Find the total count of set bits for all numbers from 1 to N
def countsetbit(n):
    countbit = 0
    for i in range(1,n+1):
        countbit += countsetbitutil(i)
    return countbit

def countsetbitutil(x):
    if x<=0:
        return 0
    return (0 if int(x%2)==0 else 1) + countsetbitutil(int(x/2))

# print(countsetbit(17))
###########################################################
#Function to check if the number is sparse or not.
""" A number is said to be a sparse number if no two or more consecutive bits are set in the binary representation."""
def isSparse(n):
        
    if n & (n>>1):
        return 0
    return 1

# print(isSparse(32))
###########################################################
def greyConverter(n):
        return n ^ (n >> 1)
    
def grayToBinary(n):
    res = n
    
    while n > 0:
        n >>= 1
        res ^= n
        
    return res
# 2nd metho
# and Gray to Binary conversion

# function to xor two characters
def xor_c(a, b):
	return '0' if(a == b) else '1'

# function to flip the bit
def flip(c):
	return '1' if(c == '0') else '0'

# function to convert binary string
# to gray string
def binarytoGray(binary):
	gray = ""

	gray += binary[0]
	for i in range(1, len(binary)):

		gray += xor_c(binary[i - 1],binary[i])

	return gray

# function to convert gray code
# string to binary string
def graytoBinary(gray):

	binary = ""
	binary += gray[0]

	for i in range(1, len(gray)):
		
		if (gray[i] == '0'):
			binary += binary[i - 1]

		else:
			binary += flip(binary[i - 1])

	return binary

# Driver Code
# binary = "01001"
# print("Gray code of", binary, "is",
# 			binarytoGray(binary))

# gray = "01101"
# print("Binary code of", gray, "is",graytoBinary(gray))
##################################################################
def countBitsFlip(a,b):
    return countbit(a^b)

def countbit(n):
        count = 0
        
        while n:
            count += 1
            n &= n-1
        return count

# print(countBitsFlip(10,20))




